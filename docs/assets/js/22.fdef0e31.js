(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{234:function(a,t,s){a.exports=s.p+"assets/img/15240669300658.65849390.jpg"},235:function(a,t,s){a.exports=s.p+"assets/img/15240668229256.7fa578b7.jpg"},236:function(a,t,s){a.exports=s.p+"assets/img/15240665091136.f2a3ae52.jpg"},237:function(a,t,s){a.exports=s.p+"assets/img/15240657568470.3776cea6.jpg"},238:function(a,t,s){a.exports=s.p+"assets/img/15240650438579.389466f1.jpg"},239:function(a,t,s){a.exports=s.p+"assets/img/15240644145718.11a6e57e.jpg"},240:function(a,t,s){a.exports=s.p+"assets/img/15240642102060.d3f2b51c.jpg"},241:function(a,t,s){a.exports=s.p+"assets/img/15240639299620.3ddf58ca.jpg"},242:function(a,t,s){a.exports=s.p+"assets/img/15240638353515.980aa145.jpg"},243:function(a,t,s){a.exports=s.p+"assets/img/15240635544350.b830c392.jpg"},244:function(a,t,s){a.exports=s.p+"assets/img/15240629819497.e5340f26.jpg"},245:function(a,t,s){a.exports=s.p+"assets/img/15240624903680.160146c7.jpg"},246:function(a,t,s){a.exports=s.p+"assets/img/15240622619909.5ee8138f.jpg"},247:function(a,t,s){a.exports=s.p+"assets/img/15240620477430.089f52ea.jpg"},248:function(a,t,s){a.exports=s.p+"assets/img/15240617854417.f3567625.jpg"},249:function(a,t,s){a.exports=s.p+"assets/img/15240616841397.cb39bee1.jpg"},250:function(a,t,s){a.exports=s.p+"assets/img/15240610675095.84c6526a.jpg"},251:function(a,t,s){a.exports=s.p+"assets/img/15222568416747.c77f6a4f.jpg"},252:function(a,t,s){a.exports=s.p+"assets/img/15240603835206.9f0367cd.jpg"},253:function(a,t,s){a.exports=s.p+"assets/img/15222563569097.da0783f7.jpg"},254:function(a,t,s){a.exports=s.p+"assets/img/15222560947658.15178e50.jpg"},255:function(a,t,s){a.exports=s.p+"assets/img/15222542546378.104e3147.jpg"},256:function(a,t,s){a.exports=s.p+"assets/img/15222537663434.27a13c80.jpg"},257:function(a,t,s){a.exports=s.p+"assets/img/15222522790596.6b5ccad4.jpg"},258:function(a,t,s){a.exports=s.p+"assets/img/15222521596413.b4c1f3c8.jpg"},259:function(a,t,s){a.exports=s.p+"assets/img/15222519842587.7e35c501.jpg"},260:function(a,t,s){a.exports=s.p+"assets/img/15222518594938.4ea5b321.jpg"},261:function(a,t,s){a.exports=s.p+"assets/img/15222517513247.5c4be0af.jpg"},262:function(a,t,s){a.exports=s.p+"assets/img/15222515785981.29ec5931.jpg"},263:function(a,t,s){a.exports=s.p+"assets/img/15222514753492.774743b1.jpg"},287:function(a,t,s){"use strict";s.r(t);var r=[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"搜索算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#搜索算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 搜索算法")]),r("h2",{attrs:{id:"_1-提出问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-提出问题","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 提出问题")]),r("p",[r("img",{attrs:{src:"imgs/the-search-problem/15222503561836.jpg",alt:""}})]),r("table",[r("thead",[r("tr",[r("th"),r("th",[a._v("记号")]),r("th",[a._v("说明")])])]),r("tbody",[r("tr",[r("td",[a._v("Initial state")]),r("td",[a._v("s0")]),r("td",[a._v("初始状态")])]),r("tr",[r("td",[a._v("Action(s)")]),r("td",[a._v("{a1,a2,a3...}")]),r("td",[a._v("在 s 状态下，可以选择的动作（例如可选路径）")])]),r("tr",[r("td",[a._v("Result(s,a)")]),r("td",[a._v("s'")]),r("td",[a._v("经过s 状态及 a 动作之后的结果，例如在 s 点选择 a 路径可以达到 s' 位置")])]),r("tr",[r("td",[a._v("Goal Test(s)")]),r("td",[a._v("True or False")]),r("td",[a._v("判定是否到达终点")])]),r("tr",[r("td",[a._v("Path Cost")]),r("td",[a._v("cost value(n)")]),r("td",[a._v("一系列动作的开销")])]),r("tr",[r("td",[a._v("Step Cost(s,a,s')")]),r("td",[a._v("n")]),r("td",[a._v("一个动作的开销")])])])]),r("h3",{attrs:{id:"_1-起点和终点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-起点和终点","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 起点和终点")]),r("p",[a._v("是我们状态空间的初始状态("),r("code",[a._v("s0")]),a._v(")和目标("),r("code",[a._v("goal")]),a._v(")")]),r("p",[r("img",{attrs:{src:s(263),alt:""}})]),r("h3",{attrs:{id:"_2-动作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-动作","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 动作")]),r("p",[a._v("在状态"),r("code",[a._v("s0")]),a._v("时，也就是 ARAD，可以有三条路作为选择，即当前状态下可行的动作有三个"),r("code",[a._v("{a1,a2,a3...}")])]),r("p",[r("img",{attrs:{src:s(262),alt:""}})]),r("h3",{attrs:{id:"_3-边界"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-边界","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 边界")]),r("p",[a._v("边界是我们当前已经探索到的最远的端点")]),r("p",[r("img",{attrs:{src:s(261),alt:""}})]),r("h3",{attrs:{id:"_4-已探索区域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-已探索区域","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 已探索区域")]),r("p",[a._v("不包括边界的，所有已经探索过的状态")]),r("p",[r("img",{attrs:{src:s(260),alt:""}})]),r("h3",{attrs:{id:"_5-未探索区域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-未探索区域","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 未探索区域")]),r("p",[a._v("未探索区域里面包含了目标")]),r("p",[r("img",{attrs:{src:s(259),alt:""}})]),r("h3",{attrs:{id:"_6-单步开销"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-单步开销","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 单步开销")]),r("p",[a._v("从一个状态"),r("code",[a._v("s")]),a._v("经过动作 "),r("code",[a._v("a")]),a._v("，转移到"),r("code",[a._v("s'")]),a._v(" 所需要的开销\n"),r("img",{attrs:{src:s(258),alt:""}})]),r("h3",{attrs:{id:"_7-路径总开销"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-路径总开销","aria-hidden":"true"}},[a._v("#")]),a._v(" 7. 路径总开销")]),r("p",[r("img",{attrs:{src:s(257),alt:""}})]),r("h2",{attrs:{id:"_2-搜索算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-搜索算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 搜索算法")]),r("h3",{attrs:{id:"_1-搜索算法族"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-搜索算法族","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 搜索算法族")]),r("p",[a._v("符号表")]),r("table",[r("thead",[r("tr",[r("th"),r("th",[a._v("记号")]),r("th",[a._v("说明")])])]),r("tbody",[r("tr",[r("td",[a._v("Initial state")]),r("td",[a._v("s0")]),r("td",[a._v("初始状态")])]),r("tr",[r("td",[a._v("Action(s)")]),r("td",[a._v("{a1,a2,a3...}")]),r("td",[a._v("在 s 状态下，可以选择的动作（例如可选路径）")])]),r("tr",[r("td",[a._v("Result(s,a)")]),r("td",[a._v("s'")]),r("td",[a._v("经过s 状态及 a 动作之后的结果，例如在 s 点选择 a 路径可以达到 s' 位置")])]),r("tr",[r("td",[a._v("Goal Test(s)")]),r("td",[a._v("True or False")]),r("td",[a._v("判定是否到达终点")])]),r("tr",[r("td",[a._v("Path Cost")]),r("td",[a._v("cost value(n)")]),r("td",[a._v("一系列动作的开销")])]),r("tr",[r("td",[a._v("Step Cost(s,a,s')")]),r("td",[a._v("n")]),r("td",[a._v("一个动作的开销")])])])]),r("p",[a._v("伪代码")]),r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[a._v("Tree"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Search"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("problem p "),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" path\nfrontier "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("path"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("p"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("init"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nloop"),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#如果边界集中已无状态")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" frontier "),r("span",{attrs:{class:"token keyword"}},[a._v("is")]),a._v(" empty "),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" fail\n    "),r("span",{attrs:{class:"token comment"}},[a._v("# 挑选边界集中的元素")]),a._v("\n    path "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" remove"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("choice"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("frontier"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#移动到该路径的终点（新状态）")]),a._v("\n    s "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" path"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("end\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#检查新状态是否是终点")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" goal test "),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" path\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#如果没到终点，对于当前状态下的每一个可行动作")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("for")]),a._v(" a "),r("span",{attrs:{class:"token keyword"}},[a._v("in")]),a._v(" p"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Actions"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),r("span",{attrs:{class:"token comment"}},[a._v("#把下一个状态添加到边界集中")]),a._v("\n        add "),r("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("path "),r("span",{attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),r("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("Result"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("a"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        to frontier \n")])]),r("h3",{attrs:{id:"_2-选路算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-选路算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 选路算法")]),r("p",[a._v("在上面的伪代码中，关键步骤是选路的方法\n"),r("code",[a._v("remove.choice(frontier)")]),a._v("\n如何进行选路决定了算法的走向")]),r("table",[r("thead",[r("tr",[r("th",[a._v("算法")]),r("th",[a._v("说明")])])]),r("tbody",[r("tr",[r("td",[a._v("宽度优先算法（最短优先搜索）")]),r("td",[a._v("总是从边界中选择一个尚未考察的路径，且该路径是最短的一支")])])])]),r("p",[a._v("首先，将状态 "),r("code",[a._v("s0（Arad）")]),a._v("先从边缘中移除，并且基于状态 "),r("code",[a._v("s0")]),a._v("，找到可行的动作"),r("code",[a._v("{a1,a2,a3}")]),a._v("，也就是三条路径，并将其终点（"),r("code",[a._v("Result(s0,an)")]),a._v("）加入到边缘集中。\n"),r("img",{attrs:{src:s(256),alt:""}})]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad----zerind\narad----sibiu\narad---timisoara\n")])]),r("p",[a._v("这三条路实际上是等价的，也就是只需要一步，假设我们随机选一条路，到 "),r("code",[a._v("sibiu")])]),r("p",[a._v("此时状态转移到 "),r("code",[a._v("sibiu")]),a._v("，接下来的关键步骤即扩展我们的探索集，也就是按照如下算法，添加新的路径到边界集中")]),r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("for")]),a._v(" a "),r("span",{attrs:{class:"token keyword"}},[a._v("in")]),a._v(" p"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Actions"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#把下一个状态添加到边界集中")]),a._v("\n    add "),r("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("path "),r("span",{attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),r("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("Result"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("a"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    to frontier \n")])]),r("p",[r("img",{attrs:{src:s(255),alt:""}})]),r("p",[a._v("首先要考虑的一点是 "),r("code",[a._v("p.Action(s)")]),a._v("到底是哪些？")]),r("p",[a._v("这个问题进行一些转换可以变为：假设我们站在 "),r("code",[a._v("sibiu")]),a._v(" ，可以有几条路来选？")]),r("p",[a._v("答案是四条：")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("sibiu ---- arad\nsibiu ---- fagaras\nsibiu ---- rimnicu vilcea\nsibiu ---- oradea\n")])]),r("p",[a._v("但是我们需要考虑到老路径："),r("code",[a._v("add [path + a >Result(s,a)]")]),a._v("\n(即我们是如何到达该状态的动作也要包含)")]),r("p",[a._v("因此实际路径就是")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad ---- sibiu ---- arad\narad ---- sibiu ---- fagaras\narad ---- sibiu ---- rimnicu vilcea\nsibiu ---- oradea\n")])]),r("p",[a._v("如下图，树搜索其实就是在空间中不断叠加树状结构，因此难以避免重复")]),r("p",[r("img",{attrs:{src:s(254),alt:""}})]),r("h3",{attrs:{id:"_3-图搜索"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-图搜索","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 图搜索")]),r("p",[a._v("为了避免重复，我们必须要记录已经探索过的路径")]),r("p",[r("img",{attrs:{src:s(253),alt:""}})]),r("p",[a._v("将树状结构按层级，分成"),r("code",[a._v("已探索")]),a._v(","),r("code",[a._v("边缘")]),a._v(","),r("code",[a._v("未探索")]),a._v("三个集合。")]),r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[a._v("function Graph"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Search"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("problem "),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\nfrontier "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{attrs:{class:"token punctuation"}},[a._v("{")]),r("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("initial"),r("span",{attrs:{class:"token punctuation"}},[a._v("]")]),r("span",{attrs:{class:"token punctuation"}},[a._v("}")]),r("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("explored"),r("span",{attrs:{class:"token operator"}},[a._v("=")]),r("span",{attrs:{class:"token punctuation"}},[a._v("{")]),r("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nloop"),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#如果边界集中已无状态")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" frontier "),r("span",{attrs:{class:"token keyword"}},[a._v("is")]),a._v(" empty "),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" fail\n    "),r("span",{attrs:{class:"token comment"}},[a._v("# 挑选边界集中的元素")]),a._v("\n    path "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" remove"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("choice"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("frontier"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#移动到该路径的终点（新状态）")]),a._v("\n    s "),r("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" path"),r("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("end"),r("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" add s to explored\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#检查新状态是否是终点")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" s "),r("span",{attrs:{class:"token keyword"}},[a._v("is")]),a._v(" a goal"),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),r("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" path\n    "),r("span",{attrs:{class:"token comment"}},[a._v("#如果没到终点，对于当前状态下的每一个可行动作")]),a._v("\n    "),r("span",{attrs:{class:"token keyword"}},[a._v("for")]),a._v(" a "),r("span",{attrs:{class:"token keyword"}},[a._v("in")]),a._v(" actions"),r("span",{attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n        "),r("span",{attrs:{class:"token comment"}},[a._v("#把下一个状态添加到边界集中")]),a._v("\n        add "),r("span",{attrs:{class:"token punctuation"}},[a._v("[")]),a._v("path "),r("span",{attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),r("span",{attrs:{class:"token operator"}},[a._v("-")]),r("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v("Result"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("a"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        to frontier \n        Unless Result"),r("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),r("span",{attrs:{class:"token punctuation"}},[a._v(",")]),a._v("a"),r("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{attrs:{class:"token keyword"}},[a._v("in")]),a._v(" frontier "),r("span",{attrs:{class:"token operator"}},[a._v("or")]),a._v(" explored\n")])]),r("p",[a._v("如果利用的是图搜索，去掉重复路径，当前有如下路径可供选择")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (checked)\narad---- sibiu  (checked)\narad ---- sibiu ---- fagaras\narad ---- sibiu ---- rimnicu vilcea\narad ---- sibiu ---- oradea\narad ---- timisoara --- lugoj \n")])]),r("p",[a._v("然后选择哪一点呢？")]),r("p",[a._v("由于是宽度优先，所以选择最短路径，"),r("code",[a._v("arad---- zerind")]),a._v(" 或者"),r("code",[a._v("arad---- timisoara")]),a._v("都可以")]),r("p",[a._v("假设选择到 "),r("code",[a._v("zerind")])]),r("p",[r("img",{attrs:{src:s(252),alt:""}})]),r("p",[a._v("接下来如何选择？")]),r("p",[a._v("在状态 "),r("code",[a._v("zerind")]),a._v(" 时，"),r("code",[a._v("action")]),a._v(" 有两个")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("zerind --- oradea （无法添加，因为 oradea已经属于 frontier）\nzerind --- arad （无法添加，因为 arad 已经属于 explored）\n")])]),r("p",[a._v("所以当前路径为")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (checked)\narad---- sibiu  (checked)\narad ---- sibiu ---- fagaras\narad ---- sibiu ---- rimnicu vilcea\narad ---- sibiu ---- oradea\narad ---- timisoara --- lugoj \n")])]),r("p",[r("img",{attrs:{src:s(251),alt:""}})]),r("p",[a._v("接下来如何选择？")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (checked)\narad---- sibiu  (checked)\narad ---- sibiu ---- fagaras\narad ---- sibiu ---- rimnicu vilcea\narad ---- sibiu ---- oradea\narad ---- timisoara --- lugoj \n")])]),r("p",[a._v("此时最短路径为"),r("code",[a._v("arad---- timisoara")])]),r("p",[a._v("当处于状态"),r("code",[a._v("timisoara")]),a._v("时，action 有一个（到 timisoara）")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("timisoara --- lugoj \n")])]),r("p",[a._v("将其加入路径表")]),r("p",[r("img",{attrs:{src:s(250),alt:""}})]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (checked)\narad---- sibiu  (checked)\narad---- timisoara  (checked)\n\narad ---- sibiu ---- fagaras\narad ---- sibiu ---- rimnicu vilcea\narad ---- sibiu ---- oradea\narad ---- timisoara --- lugoj \n")])]),r("p",[a._v("至此，我们还有3条 cost 为2 的路径可以探索")]),r("p",[r("img",{attrs:{src:s(249),alt:""}})]),r("p",[a._v("移动到 fagaras 之后，action 有")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("fagaras --- sibiu （无法添加，因为 sibiu已经属于 explored）\nfagaras --- bucharest\n")])]),r("p",[r("img",{attrs:{src:s(248),alt:""}})]),r("p",[a._v("此时虽然看上去已经到终点了，但实际上不是。\n一个节点只有在 remove的时候才会去进行检测，加入 frontier 时不会。除非我们有一些假设：")]),r("ol",[r("li",[a._v("我们使用宽度优先算法")]),r("li",[a._v("没有cost为2.5的路径")])]),r("p",[a._v("此时我们可以在加入时就进行检测，但是如果我们期望获得真实长度最短的路径，此时的结果可能不是最佳的。")]),r("p",[r("img",{attrs:{src:s(247),alt:""}})]),r("h3",{attrs:{id:"_4-最小耗散优先算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-最小耗散优先算法","aria-hidden":"true"}},[a._v("#")]),a._v(" 4. 最小耗散优先算法")]),r("p",[a._v("目的：找到总耗散最小的路径")]),r("p",[a._v("开始时仍然是3个 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td",[a._v("zerind")]),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("sibiu")]),r("td")]),r("tr",[r("td",[a._v("timisoara")]),r("td")])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)\narad---- sibiu  (140)\narad---- timisoara  (118)\n")])]),r("p",[r("img",{attrs:{src:s(246),alt:""}})]),r("p",[a._v("选择 cost 最小的路径，我们移动到 zerind")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)\narad---- sibiu  (140)\narad---- timisoara  (118)\n")])]),r("p",[r("img",{attrs:{src:s(245),alt:""}})]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td",[a._v("oradea")]),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("sibiu")]),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("timisoara")]),r("td")])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)\narad---- sibiu  (140)\narad---- timisoara  (118)\n")])]),r("p",[a._v("选择 cost 最小的路径，我们移动到 timisoara")]),r("p",[r("img",{attrs:{src:s(244),alt:""}})]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td",[a._v("oradea")]),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("sibiu")]),r("td",[a._v("zerind")])]),r("tr",[r("td"),r("td",[a._v("timisoara")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)\narad---- sibiu  (140)\narad---- timisoara  (118) --lugoj(118+111=229)\n")])]),r("p",[a._v("选择最短路径，到达 sibiu，添加 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td",[a._v("oradea")]),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("lugoj")]),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("fagaras")]),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("rimnicu vilcea")]),r("td",[a._v("sibiu")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(140+99=239)\narad---- sibiu  (140)---rimnicu vilcea(140+80=220)\narad---- timisoara  (118) --lugoj(118+111=229)\n")])]),r("p",[r("img",{attrs:{src:s(243),alt:""}})]),r("p",[a._v("选择最短路径，到达 oradea，没有可添加的 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("lugoj")]),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("fagaras")]),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("rimnicu vilcea")]),r("td",[a._v("sibiu")])]),r("tr",[r("td"),r("td",[a._v("oradea")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(140+99=239)\narad---- sibiu  (140)---rimnicu vilcea(140+80=220)\narad---- timisoara  (118) --lugoj(118+111=229)\n")])]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("rimnicu vilcea")]),a._v("，没有可添加的 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("lugoj")]),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("fagaras")]),r("td",[a._v("timisoara")])]),r("tr",[r("td"),r("td",[a._v("sibiu")])]),r("tr",[r("td"),r("td",[a._v("oradea")])]),r("tr",[r("td"),r("td",[a._v("rimnicu vilcea")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (71+75=146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(140+99=239)\narad---- sibiu  (140)---rimnicu vilcea(140+80=220)(checked)\narad---- timisoara  (118) --lugoj(118+111=229)\n")])]),r("p",[r("img",{attrs:{src:s(242),alt:""}})]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("rimnicu vilcea")]),a._v("，添加 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td",[a._v("lugoj")]),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("fagaras")]),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("pitesti")]),r("td",[a._v("sibiu")])]),r("tr",[r("td",[a._v("craiova")]),r("td",[a._v("oradea")])]),r("tr",[r("td"),r("td",[a._v("rimnicu vilcea")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(140+99=239)\narad---- sibiu  (140)---rimnicu vilcea(220)(checked)\narad---- timisoara  (118) --lugoj(118+111=229)\narad---- sibiu  (140)---rimnicu vilcea(220)---pitesti(220+97=317)\narad---- sibiu  (140)---rimnicu vilcea(220)---craiova(220+146=366)\n")])]),r("p",[r("img",{attrs:{src:s(241),alt:""}})]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("lugoj")]),a._v("，添加 action")]),r("p",[r("img",{attrs:{src:s(240),alt:""}})]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td"),r("td",[a._v("zerind")])]),r("tr",[r("td",[a._v("fagaras")]),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("pitesti")]),r("td",[a._v("sibiu")])]),r("tr",[r("td",[a._v("craiova")]),r("td",[a._v("oradea")])]),r("tr",[r("td",[a._v("mehadia")]),r("td",[a._v("rimnicu vilcea")])]),r("tr",[r("td"),r("td",[a._v("lugoj")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(140+99=239)\narad---- sibiu  (140)---rimnicu vilcea(220)(checked)\narad---- timisoara  (118) --lugoj(229)(checked)\narad---- sibiu  (140)---rimnicu vilcea(220)---pitesti(220+97=317)\narad---- sibiu  (140)---rimnicu vilcea(220)---craiova(220+146=366)\narad---- timisoara  (118) --lugoj(229)---mehadia(299)\n")])]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("lugoj")]),a._v("，添加 action")]),r("p",[r("img",{attrs:{src:s(239),alt:""}})]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td"),r("td",[a._v("zerind")])]),r("tr",[r("td"),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("pitesti")]),r("td",[a._v("sibiu")])]),r("tr",[r("td",[a._v("craiova")]),r("td",[a._v("oradea")])]),r("tr",[r("td",[a._v("mehadia")]),r("td",[a._v("rimnicu vilcea")])]),r("tr",[r("td",[a._v("bucharest")]),r("td",[a._v("lugoj")])]),r("tr",[r("td"),r("td",[a._v("fagaras")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(239)(checked)\narad---- sibiu  (140)---rimnicu vilcea(220)(checked)\narad---- timisoara  (118) --lugoj(229)(checked)\narad---- sibiu  (140)---rimnicu vilcea(220)---pitesti(220+97=317)\narad---- sibiu  (140)---rimnicu vilcea(220)---craiova(220+146=366)\narad---- timisoara  (118) --lugoj(229)---mehadia(299)\narad---- sibiu  (140)---fagaras(239)---bucharest(239+211=450)\n")])]),r("p",[a._v("虽然终点已经被添加到了边缘集，但是搜索仍然需要继续。")]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("mehadia")]),a._v("，添加 action")]),r("table",[r("thead",[r("tr",[r("th",[a._v("frontier")]),r("th",[a._v("explored")])])]),r("tbody",[r("tr",[r("td"),r("td",[a._v("arad")])]),r("tr",[r("td"),r("td",[a._v("zerind")])]),r("tr",[r("td"),r("td",[a._v("timisoara")])]),r("tr",[r("td",[a._v("pitesti")]),r("td",[a._v("sibiu")])]),r("tr",[r("td",[a._v("craiova")]),r("td",[a._v("oradea")])]),r("tr",[r("td"),r("td",[a._v("rimnicu vilcea")])]),r("tr",[r("td",[a._v("bucharest")]),r("td",[a._v("lugoj")])]),r("tr",[r("td",[a._v("drobeta")]),r("td",[a._v("fagaras")])]),r("tr",[r("td"),r("td",[a._v("mehadia")])])])]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- zerind (75)---oradea (146)(checked)\narad---- sibiu  (140)(checked)\narad---- sibiu  (140)---fagaras(239)(checked)\narad---- sibiu  (140)---rimnicu vilcea(220)(checked)\narad---- timisoara  (118) --lugoj(229)(checked)\narad---- timisoara  (118) --lugoj(229)---mehadia(299)(checked)\narad---- sibiu  (140)---rimnicu vilcea(220)---pitesti(220+97=317)\narad---- sibiu  (140)---rimnicu vilcea(220)---craiova(220+146=366)\narad---- sibiu  (140)---fagaras(239)---bucharest(239+211=450)\narad---- timisoara  (118) --lugoj(229)---mehadia(299)---drobeta(374)\n")])]),r("p",[a._v("选择最短路径，到达 "),r("code",[a._v("pitesti")]),a._v("，两个 action，到 craiova 的耗散更大所以放弃，到 buchares")]),r("p",[r("img",{attrs:{src:s(238),alt:""}})]),r("p",[a._v("最后我们得到了一条更短的路径")]),r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arad---- sibiu  (140)---rimnicu_vilcea(220)---pitesti(317)---bucharest(418)\narad---- sibiu  (140)---fagaras(239)---bucharest(450)\n")])]),r("p",[a._v("以此类推，我们还需要将其他边缘集中的节点也再检查一遍，此处不再赘述，因为没有更好的路径了。")]),r("h3",{attrs:{id:"_5-算法比较-1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-算法比较-1","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 算法比较[^1]")]),r("table",[r("thead",[r("tr",[r("th"),r("th",[a._v("广度优先")]),r("th",[a._v("最小耗散")]),r("th",[a._v("深度优先")])])]),r("tbody",[r("tr",[r("td",[a._v("目标")]),r("td",[a._v("优先拓展最浅层（步骤最少）")]),r("td",[a._v("优先拓展最短路径")]),r("td",[a._v("优先最长路径")])]),r("tr",[r("td",[a._v("储存路径")]),r("td",[a._v("2^n")]),r("td",[a._v("2^n")]),r("td",[a._v("n")])]),r("tr",[r("td",[a._v("是否最优")]),r("td",[a._v("Y")]),r("td",[a._v("Y")]),r("td",[a._v("N")])]),r("tr",[r("td",[a._v("是否完备")]),r("td",[a._v("Y")]),r("td",[a._v("Y")]),r("td",[a._v("N")])])])]),r("p",[a._v("注:是否最优，表示是否能够确保找到最短路径\n注:是否完备，表示是否能够确保完成算法")]),r("p",[r("img",{attrs:{src:s(237),alt:""}})]),r("p",[r("img",{attrs:{src:s(236),alt:""}}),a._v("\n虽然深度优先储存空间最小，但是如果考虑无穷大的场景，它可能会沿着一条边一直寻找，如果目标在其他边则永远无法找到。")]),r("h3",{attrs:{id:"_6-贪婪最佳搜索"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-贪婪最佳搜索","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 贪婪最佳搜索")]),r("p",[a._v("优先考察里目标最近的路径")]),r("p",[r("img",{attrs:{src:s(235),alt:""}})]),r("p",[a._v("困局:当在起点和终点之间有障碍时，可能导致结果不是最佳的\n"),r("img",{attrs:{src:s(234),alt:""}})]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("扩展阅读")]),r("ol",[r("li",[r("a",{attrs:{href:"http://norvig.com/21-days.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Teach Yourself Programming in Ten Years")])])])])])}],e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},r,!1,null,null,null);t.default=n.exports}}]);